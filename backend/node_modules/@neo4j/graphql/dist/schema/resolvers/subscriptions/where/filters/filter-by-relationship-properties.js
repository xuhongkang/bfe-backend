"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterByRelationshipProperties = void 0;
const filter_by_properties_1 = require("./filter-by-properties");
const parse_filter_property_1 = require("../utils/parse-filter-property");
const type_checks_1 = require("../utils/type-checks");
const multiple_conditions_aggregation_map_1 = require("../utils/multiple-conditions-aggregation-map");
function filterByRelationshipProperties({ node, whereProperties, receivedEvent, nodes, relationshipFields, }) {
    const receivedEventProperties = receivedEvent.properties;
    const receivedEventRelationshipType = receivedEvent.relationshipName;
    const relationships = node.relationFields.filter((f) => f.type === receivedEventRelationshipType);
    if (!relationships.length) {
        return false;
    }
    const receivedEventRelationship = relationships[0]; // ONE relationship only possible
    for (const [wherePropertyKey, wherePropertyValue] of Object.entries(whereProperties)) {
        if (Object.keys(multiple_conditions_aggregation_map_1.multipleConditionsAggregationMap).includes(wherePropertyKey)) {
            const comparisonResultsAggregationFn = multiple_conditions_aggregation_map_1.multipleConditionsAggregationMap[wherePropertyKey];
            let comparisonResults;
            if (wherePropertyKey === "NOT") {
                comparisonResults = filterByRelationshipProperties({
                    node,
                    whereProperties: wherePropertyValue,
                    receivedEvent,
                    nodes,
                    relationshipFields,
                });
            }
            else {
                comparisonResults = wherePropertyValue.map((whereCl) => {
                    return filterByRelationshipProperties({
                        node,
                        whereProperties: whereCl,
                        receivedEvent,
                        nodes,
                        relationshipFields,
                    });
                });
            }
            if (!comparisonResultsAggregationFn(comparisonResults)) {
                return false;
            }
        }
        const { fieldName } = (0, parse_filter_property_1.parseFilterProperty)(wherePropertyKey);
        const connectedNodeFieldName = node.subscriptionEventPayloadFieldNames.create_relationship;
        if (fieldName === connectedNodeFieldName) {
            const key = receivedEventRelationship.direction === "IN" ? "to" : "from";
            if (!(0, filter_by_properties_1.filterByProperties)(node, wherePropertyValue, receivedEventProperties[key])) {
                return false;
            }
        }
        if (fieldName === "createdRelationship" || fieldName === "deletedRelationship") {
            const receivedEventRelationshipName = receivedEventRelationship.fieldName;
            const receivedEventRelationshipData = wherePropertyValue[receivedEventRelationshipName];
            const isRelationshipOfReceivedTypeFilteredOut = !receivedEventRelationshipData;
            if (isRelationshipOfReceivedTypeFilteredOut) {
                // case `actors: {}` filtering out relationships of other type
                return false;
            }
            const isRelationshipOfReceivedTypeIncludedWithNoFilters = !Object.keys(receivedEventRelationshipData).length;
            if (isRelationshipOfReceivedTypeIncludedWithNoFilters) {
                // case `actors: {}` including all relationships of the type
                return true;
            }
            const relationshipPropertiesInterfaceName = receivedEventRelationship.properties || "";
            const { edge: edgeProperty, node: nodeProperty, ...unionTypes } = receivedEventRelationshipData;
            if (edgeProperty &&
                !filterRelationshipEdgeProperty({
                    relationshipFields,
                    relationshipPropertiesInterfaceName,
                    edgeProperty,
                    receivedEventProperties,
                })) {
                return false;
            }
            const key = receivedEventRelationship.direction === "IN" ? "from" : "to";
            if (nodeProperty) {
                if ((0, type_checks_1.isInterfaceType)(nodeProperty, receivedEventRelationship)) {
                    const targetNodeTypename = receivedEvent[`${key}Typename`];
                    if (!filterRelationshipInterfaceProperty({
                        nodeProperty,
                        nodes,
                        receivedEventProperties,
                        targetNodeTypename,
                        key,
                    })) {
                        return false;
                    }
                }
                else if ((0, type_checks_1.isStandardType)(nodeProperty, receivedEventRelationship)) {
                    // standard type fields
                    const nodeTo = nodes.find((n) => n.name === receivedEventRelationship.typeMeta.name);
                    if (!(0, filter_by_properties_1.filterByProperties)(nodeTo, nodeProperty, receivedEventProperties[key])) {
                        return false;
                    }
                }
            }
            if (Object.keys(unionTypes).length) {
                // union types
                const targetNodeTypename = receivedEvent[`${key}Typename`];
                const targetNodePropsByTypename = unionTypes[targetNodeTypename];
                const isRelationshipOfReceivedTypeFilteredOut = !targetNodePropsByTypename;
                if (isRelationshipOfReceivedTypeFilteredOut) {
                    return false;
                }
                if (!filterRelationshipUnionProperties({
                    targetNodePropsByTypename,
                    targetNodeTypename,
                    receivedEventProperties,
                    relationshipFields,
                    relationshipPropertiesInterfaceName,
                    key,
                    nodes,
                })) {
                    return false;
                }
            }
        }
    }
    return true;
}
exports.filterByRelationshipProperties = filterByRelationshipProperties;
function filterRelationshipUnionProperties({ targetNodePropsByTypename, targetNodeTypename, receivedEventProperties, relationshipFields, relationshipPropertiesInterfaceName, key, nodes, }) {
    for (const [propertyName, propertyValueAsUnionTypeData] of Object.entries(targetNodePropsByTypename)) {
        if (propertyName === "node") {
            const nodeTo = nodes.find((n) => targetNodeTypename === n.name);
            if (!(0, filter_by_properties_1.filterByProperties)(nodeTo, propertyValueAsUnionTypeData, receivedEventProperties[key])) {
                return false;
            }
        }
        if (propertyName === "edge" &&
            !filterRelationshipEdgeProperty({
                relationshipFields,
                relationshipPropertiesInterfaceName,
                edgeProperty: propertyValueAsUnionTypeData,
                receivedEventProperties,
            })) {
            return false;
        }
    }
    return true;
}
function filterRelationshipInterfaceProperty({ nodeProperty, nodes, receivedEventProperties, targetNodeTypename, key, }) {
    const { _on, ...commonFields } = nodeProperty;
    const targetNode = nodes.find((n) => n.name === targetNodeTypename);
    if (commonFields && !_on) {
        if (!(0, filter_by_properties_1.filterByProperties)(targetNode, commonFields, receivedEventProperties[key])) {
            return false;
        }
    }
    if ((0, type_checks_1.isInterfaceSpecificFieldType)(_on)) {
        const isRelationshipOfReceivedTypeFilteredOut = !_on[targetNodeTypename];
        if (isRelationshipOfReceivedTypeFilteredOut) {
            return false;
        }
        const commonFieldsMergedWithSpecificFields = { ...commonFields, ..._on[targetNodeTypename] }; //override common <fields, filter> combination with specific <fields, filter>
        if (!(0, filter_by_properties_1.filterByProperties)(targetNode, commonFieldsMergedWithSpecificFields, receivedEventProperties[key])) {
            return false;
        }
    }
    return true;
}
function filterRelationshipEdgeProperty({ relationshipFields, relationshipPropertiesInterfaceName, edgeProperty, receivedEventProperties, }) {
    const relationship = relationshipFields.get(relationshipPropertiesInterfaceName);
    const noRelationshipPropertiesFound = !relationship;
    if (noRelationshipPropertiesFound) {
        return true;
    }
    return (0, filter_by_properties_1.filterByProperties)(relationship, edgeProperty, receivedEventProperties.relationship);
}
//# sourceMappingURL=filter-by-relationship-properties.js.map