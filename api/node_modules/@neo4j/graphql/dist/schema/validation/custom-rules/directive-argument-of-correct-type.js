"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectiveArgumentOfCorrectType = void 0;
const graphql_1 = require("graphql");
function DirectiveArgumentOfCorrectType(context) {
    const schema = (0, graphql_1.buildASTSchema)(context.getDocument(), { assumeValid: true, assumeValidSDL: true });
    return {
        Directive(directiveNode) {
            // Validate only Authorization usage
            if (!directiveNode.name.value.includes("Authorization")) {
                return;
            }
            const directiveDefinition = schema.getDirective(directiveNode.name.value);
            if (!directiveDefinition) {
                // Do not report, delegate this report to KnownDirectivesRule
                return;
            }
            directiveNode.arguments?.forEach((argument) => {
                const argumentDefinition = findArgumentDefinitionNodeByName(directiveDefinition.args, argument.name.value);
                if (!argumentDefinition) {
                    return;
                }
                const { isValid, errorMsg } = assertArgumentType(argument, argumentDefinition);
                if (!isValid) {
                    context.reportError(new graphql_1.GraphQLError(`Invalid argument: ${argument.name.value}, error: ${errorMsg}`));
                }
            });
        },
    };
}
exports.DirectiveArgumentOfCorrectType = DirectiveArgumentOfCorrectType;
function findArgumentDefinitionNodeByName(args, name) {
    return args.find((arg) => arg.name === name);
}
function assertArgumentType(argumentNode, inputValueDefinition) {
    const argType = inputValueDefinition.type;
    const argValue = (0, graphql_1.valueFromASTUntyped)(argumentNode.value);
    let isValid = true;
    let errorMsg;
    const onError = (_path, _invalidValue, error) => {
        isValid = false;
        errorMsg = error.message;
    };
    (0, graphql_1.coerceInputValue)(argValue, argType, onError);
    return { isValid, errorMsg };
}
//# sourceMappingURL=directive-argument-of-correct-type.js.map