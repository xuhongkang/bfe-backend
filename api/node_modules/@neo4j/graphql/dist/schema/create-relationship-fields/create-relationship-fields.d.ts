import type { SchemaComposer } from "graphql-compose";
import { InterfaceTypeComposer, ObjectTypeComposer } from "graphql-compose";
import type { Node } from "../../classes";
import type { Subgraph } from "../../classes/Subgraph";
import type { RelationField } from "../../types";
import type { ObjectFields } from "../get-obj-field-meta";
interface CreateRelationshipFieldsArgs {
    relationshipFields: RelationField[];
    schemaComposer: SchemaComposer;
    composeNode: ObjectTypeComposer | InterfaceTypeComposer;
    sourceName: string;
    nodes: Node[];
    relationshipPropertyFields: Map<string, ObjectFields>;
    subgraph?: Subgraph;
}
declare function createRelationshipFields({ relationshipFields, schemaComposer, composeNode, sourceName, nodes, relationshipPropertyFields, subgraph, }: CreateRelationshipFieldsArgs): void;
export default createRelationshipFields;
//# sourceMappingURL=create-relationship-fields.d.ts.map