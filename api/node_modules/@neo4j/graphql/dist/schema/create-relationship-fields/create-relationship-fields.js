"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_compose_1 = require("graphql-compose");
const constants_1 = require("../../constants");
const upper_first_1 = require("../../utils/upper-first");
const field_aggregation_composer_1 = require("../aggregations/field-aggregation-composer");
const add_relationship_array_filters_1 = require("../augment/add-relationship-array-filters");
const directed_argument_1 = require("../directed-argument");
const to_compose_1 = require("../to-compose");
const create_aggregation_input_fields_1 = require("./create-aggregation-input-fields");
const create_connect_or_create_field_1 = require("./create-connect-or-create-field");
const create_relationship_interface_fields_1 = require("./create-relationship-interface-fields");
const create_relationship_union_fields_1 = require("./create-relationship-union-fields");
const create_top_level_connect_or_create_input_1 = require("./create-top-level-connect-or-create-input");
const overwrite_1 = require("./fields/overwrite");
const inspect_object_fields_1 = require("./inspect-object-fields");
function createRelationshipFields({ relationshipFields, schemaComposer, 
// TODO: Ideally we come up with a solution where we don't have to pass the following into these kind of functions
composeNode, sourceName, nodes, relationshipPropertyFields, subgraph, }) {
    if (!relationshipFields.length) {
        return;
    }
    relationshipFields.forEach((rel) => {
        const relFields = relationshipPropertyFields.get(rel.properties || "");
        const { hasNonGeneratedProperties, anyNonNullRelProperties, hasNonNullNonGeneratedProperties } = (0, inspect_object_fields_1.inspectObjectFields)(relFields);
        if (rel.interface) {
            (0, create_relationship_interface_fields_1.createRelationshipInterfaceFields)({
                nodes,
                rel,
                composeNode,
                schemaComposer,
                sourceName,
                hasNonGeneratedProperties,
                anyNonNullRelProperties,
            });
            return;
        }
        if (rel.union) {
            (0, create_relationship_union_fields_1.createRelationshipUnionFields)({
                nodes,
                rel,
                composeNode,
                sourceName,
                schemaComposer,
                hasNonGeneratedProperties,
                hasNonNullNonGeneratedProperties,
            });
            return;
        }
        const node = nodes.find((x) => x.name === rel.typeMeta.name);
        if (!node) {
            return;
        }
        const deprecatedDirectives = (0, to_compose_1.graphqlDirectivesToCompose)(rel.otherDirectives.filter((directive) => directive.name.value === "deprecated"));
        const nestedOperations = new Set(rel.nestedOperations);
        const nodeCreateInput = schemaComposer.getITC(`${sourceName}CreateInput`);
        const nodeUpdateInput = schemaComposer.getITC(`${sourceName}UpdateInput`);
        const upperFieldName = (0, upper_first_1.upperFirst)(rel.fieldName);
        const relationshipWhereTypeInputName = `${sourceName}${upperFieldName}AggregateInput`;
        // Don't generate empty input type
        let nodeFieldInput;
        if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CONNECT) ||
            nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CREATE) ||
            // The connectOrCreate field is not generated if the related type does not have a unique field
            (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CONNECT_OR_CREATE) && node.uniqueFields.length)) {
            const nodeFieldInputName = `${rel.connectionPrefix}${upperFieldName}FieldInput`;
            nodeFieldInput = schemaComposer.getOrCreateITC(nodeFieldInputName);
        }
        // Don't generate an empty input type
        let nodeFieldUpdateInput;
        // If the only nestedOperation is connectOrCreate, it won't be generated if there are no unique fields on the related type
        const onlyConnectOrCreateAndNoUniqueFields = nestedOperations.size === 1 &&
            nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CONNECT_OR_CREATE) &&
            !node.uniqueFields.length;
        if (nestedOperations.size !== 0 && !onlyConnectOrCreateAndNoUniqueFields) {
            const nodeFieldUpdateInputName = `${rel.connectionPrefix}${upperFieldName}UpdateFieldInput`;
            nodeFieldUpdateInput = schemaComposer.getOrCreateITC(nodeFieldUpdateInputName);
            // Add where fields
            nodeFieldUpdateInput.addFields({
                where: `${rel.connectionPrefix}${upperFieldName}ConnectionWhere`,
            });
        }
        const nodeWhereAggregationInput = (0, create_aggregation_input_fields_1.createAggregationInputFields)(node, sourceName, rel, schemaComposer);
        const edgeWhereAggregationInput = relFields && (0, create_aggregation_input_fields_1.createAggregationInputFields)(relFields, sourceName, rel, schemaComposer);
        const whereAggregateInput = schemaComposer.createInputTC({
            name: relationshipWhereTypeInputName,
            fields: {
                count: "Int",
                count_LT: "Int",
                count_LTE: "Int",
                count_GT: "Int",
                count_GTE: "Int",
                AND: `[${relationshipWhereTypeInputName}!]`,
                OR: `[${relationshipWhereTypeInputName}!]`,
                NOT: relationshipWhereTypeInputName,
                ...(nodeWhereAggregationInput ? { node: nodeWhereAggregationInput } : {}),
                ...(edgeWhereAggregationInput ? { edge: edgeWhereAggregationInput } : {}),
            },
        });
        const whereInput = schemaComposer.getITC(`${sourceName}Where`);
        whereInput.addFields({
            [rel.fieldName]: {
                type: `${node.name}Where`,
            },
            [`${rel.fieldName}_NOT`]: {
                type: `${node.name}Where`,
            },
            [`${rel.fieldName}Aggregate`]: {
                type: whereAggregateInput,
                directives: deprecatedDirectives,
            },
        });
        // n..m Relationships
        if (rel.typeMeta.array) {
            (0, add_relationship_array_filters_1.addRelationshipArrayFilters)({
                whereInput,
                fieldName: rel.fieldName,
                sourceName,
                relatedType: rel.typeMeta.name,
                whereType: `${node.name}Where`,
                directives: deprecatedDirectives,
            });
        }
        if (!rel.writeonly) {
            const relationshipField = {
                type: rel.typeMeta.pretty,
                description: rel.description,
                directives: (0, to_compose_1.graphqlDirectivesToCompose)(rel.otherDirectives),
            };
            let generateRelFieldArgs = true;
            // Subgraph schemas do not support arguments on relationship fields (singular)
            if (subgraph) {
                if (!rel.typeMeta.array) {
                    generateRelFieldArgs = false;
                }
            }
            if (generateRelFieldArgs) {
                const nodeFieldsBaseArgs = {
                    where: `${rel.typeMeta.name}Where`,
                    options: `${rel.typeMeta.name}Options`,
                };
                const nodeFieldsArgs = (0, directed_argument_1.addDirectedArgument)(nodeFieldsBaseArgs, rel);
                relationshipField.args = nodeFieldsArgs;
            }
            if (rel.selectableOptions.onRead) {
                composeNode.addFields({
                    [rel.fieldName]: relationshipField,
                });
            }
            if (composeNode instanceof graphql_compose_1.ObjectTypeComposer) {
                const baseTypeName = `${sourceName}${node.name}${upperFieldName}`;
                const fieldAggregationComposer = new field_aggregation_composer_1.FieldAggregationComposer(schemaComposer, subgraph);
                const aggregationTypeObject = fieldAggregationComposer.createAggregationTypeObject(baseTypeName, node, relFields);
                const aggregationFieldsBaseArgs = {
                    where: `${rel.typeMeta.name}Where`,
                };
                const aggregationFieldsArgs = (0, directed_argument_1.addDirectedArgument)(aggregationFieldsBaseArgs, rel);
                if (rel.aggregate) {
                    composeNode.addFields({
                        [`${rel.fieldName}Aggregate`]: {
                            type: aggregationTypeObject,
                            args: aggregationFieldsArgs,
                            directives: deprecatedDirectives,
                        },
                    });
                }
            }
        }
        if (rel.settableOptions.onCreate) {
            // Interface CreateInput does not require relationship input fields
            // These are specified on the concrete nodes.
            if (!(composeNode instanceof graphql_compose_1.InterfaceTypeComposer) && nodeFieldInput) {
                nodeCreateInput.addFields({
                    [rel.fieldName]: {
                        type: nodeFieldInput,
                        directives: deprecatedDirectives,
                    },
                });
            }
        }
        if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CONNECT_OR_CREATE) &&
            (nodeFieldInput || nodeFieldUpdateInput)) {
            // createConnectOrCreateField return undefined if the node has no uniqueFields
            const connectOrCreate = (0, create_connect_or_create_field_1.createConnectOrCreateField)({
                relationField: rel,
                node,
                schemaComposer,
                hasNonGeneratedProperties,
                hasNonNullNonGeneratedProperties,
            });
            if (connectOrCreate) {
                if (nodeFieldUpdateInput) {
                    nodeFieldUpdateInput.addFields({
                        connectOrCreate,
                    });
                }
                if (nodeFieldInput) {
                    nodeFieldInput.addFields({
                        connectOrCreate,
                    });
                }
                (0, create_top_level_connect_or_create_input_1.createTopLevelConnectOrCreateInput)({ schemaComposer, sourceName, rel });
            }
        }
        if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CREATE) &&
            (nodeFieldInput || nodeFieldUpdateInput)) {
            const createName = `${rel.connectionPrefix}${upperFieldName}CreateFieldInput`;
            const create = rel.typeMeta.array ? `[${createName}!]` : createName;
            schemaComposer.getOrCreateITC(createName, (tc) => {
                tc.addFields({
                    node: `${node.name}CreateInput!`,
                    ...(hasNonGeneratedProperties
                        ? { edge: `${rel.properties}CreateInput${hasNonNullNonGeneratedProperties ? `!` : ""}` }
                        : {}),
                });
            });
            if (nodeFieldUpdateInput) {
                nodeFieldUpdateInput.addFields({
                    create,
                });
            }
            if (nodeFieldInput) {
                nodeFieldInput.addFields({
                    create,
                });
            }
            const nodeRelationInput = schemaComposer.getOrCreateITC(`${sourceName}RelationInput`);
            nodeRelationInput.addFields({
                [rel.fieldName]: {
                    type: create,
                    directives: deprecatedDirectives,
                },
            });
        }
        if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.CONNECT) &&
            (nodeFieldInput || nodeFieldUpdateInput)) {
            const connectName = `${rel.connectionPrefix}${upperFieldName}ConnectFieldInput`;
            const connect = rel.typeMeta.array ? `[${connectName}!]` : connectName;
            const connectWhereName = `${node.name}ConnectWhere`;
            schemaComposer.getOrCreateITC(connectWhereName, (tc) => {
                tc.addFields({
                    node: `${node.name}Where!`,
                });
            });
            schemaComposer.getOrCreateITC(connectName, (tc) => {
                tc.addFields({
                    where: connectWhereName,
                    ...(node.relationFields.length
                        ? { connect: rel.typeMeta.array ? `[${node.name}ConnectInput!]` : `${node.name}ConnectInput` }
                        : {}),
                    ...(hasNonGeneratedProperties
                        ? { edge: `${rel.properties}CreateInput${hasNonNullNonGeneratedProperties ? `!` : ""}` }
                        : {}),
                    overwrite: overwrite_1.overwrite,
                });
                tc.makeFieldNonNull("overwrite");
            });
            if (nodeFieldUpdateInput) {
                nodeFieldUpdateInput.addFields({
                    connect,
                });
            }
            if (nodeFieldInput) {
                nodeFieldInput.addFields({
                    connect,
                });
            }
            const nodeConnectInput = schemaComposer.getOrCreateITC(`${sourceName}ConnectInput`);
            nodeConnectInput.addFields({
                [rel.fieldName]: {
                    type: connect,
                    directives: deprecatedDirectives,
                },
            });
        }
        if (rel.settableOptions.onUpdate && nodeFieldUpdateInput) {
            const connectionUpdateInputName = `${rel.connectionPrefix}${upperFieldName}UpdateConnectionInput`;
            nodeUpdateInput.addFields({
                [rel.fieldName]: {
                    type: rel.typeMeta.array
                        ? `[${nodeFieldUpdateInput.getTypeName()}!]`
                        : nodeFieldUpdateInput.getTypeName(),
                    directives: deprecatedDirectives,
                },
            });
            schemaComposer.getOrCreateITC(connectionUpdateInputName, (tc) => {
                tc.addFields({
                    node: `${node.name}UpdateInput`,
                    ...(hasNonGeneratedProperties ? { edge: `${rel.properties}UpdateInput` } : {}),
                });
            });
            if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.UPDATE)) {
                nodeFieldUpdateInput.addFields({
                    update: connectionUpdateInputName,
                });
            }
        }
        if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.DELETE) && nodeFieldUpdateInput) {
            const nodeFieldDeleteInputName = `${rel.connectionPrefix}${upperFieldName}DeleteFieldInput`;
            nodeFieldUpdateInput.addFields({
                delete: rel.typeMeta.array ? `[${nodeFieldDeleteInputName}!]` : nodeFieldDeleteInputName,
            });
            if (!schemaComposer.has(nodeFieldDeleteInputName)) {
                schemaComposer.getOrCreateITC(nodeFieldDeleteInputName, (tc) => {
                    tc.addFields({
                        where: `${rel.connectionPrefix}${upperFieldName}ConnectionWhere`,
                        ...(node.relationFields.length ? { delete: `${node.name}DeleteInput` } : {}),
                    });
                });
            }
            const nodeDeleteInput = schemaComposer.getOrCreateITC(`${sourceName}DeleteInput`);
            nodeDeleteInput.addFields({
                [rel.fieldName]: {
                    type: rel.typeMeta.array ? `[${nodeFieldDeleteInputName}!]` : nodeFieldDeleteInputName,
                    directives: deprecatedDirectives,
                },
            });
        }
        if (nestedOperations.has(constants_1.RelationshipNestedOperationsOption.DISCONNECT) && nodeFieldUpdateInput) {
            const nodeFieldDisconnectInputName = `${rel.connectionPrefix}${upperFieldName}DisconnectFieldInput`;
            if (!schemaComposer.has(nodeFieldDisconnectInputName)) {
                schemaComposer.createInputTC({
                    name: nodeFieldDisconnectInputName,
                    fields: {
                        where: `${rel.connectionPrefix}${upperFieldName}ConnectionWhere`,
                        ...(node.relationFields.length ? { disconnect: `${node.name}DisconnectInput` } : {}),
                    },
                });
            }
            nodeFieldUpdateInput.addFields({
                disconnect: rel.typeMeta.array ? `[${nodeFieldDisconnectInputName}!]` : nodeFieldDisconnectInputName,
            });
            const nodeDisconnectInput = schemaComposer.getOrCreateITC(`${sourceName}DisconnectInput`);
            nodeDisconnectInput.addFields({
                [rel.fieldName]: {
                    type: rel.typeMeta.array ? `[${nodeFieldDisconnectInputName}!]` : nodeFieldDisconnectInputName,
                    directives: deprecatedDirectives,
                },
            });
        }
    });
}
exports.default = createRelationshipFields;
//# sourceMappingURL=create-relationship-fields.js.map